/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ActionController;

import ActiveRecord.Applicant;
import ActiveRecord.ApplicantDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.sql.DataSource;

/**
 *
 * @author Vidak
 */

public class JdbcApplicantDAO implements ApplicantDAO {
    private DataSource dataSource;
 
    public void setDataSource(DataSource dataSource) {
            this.dataSource = dataSource;
    }

    /**
     * This function writes a Applicant to the database and returns
     * the ID generated by the query.
     * <p>
     * This method receives a Applicant and writes it to the database
     * @param applicant The Applicant object to be written
     * @return new applicant id.
     * @throws java.sql.SQLException 
     */
    @Override
    public long insert(Applicant applicant) throws SQLException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet generatedKeys = null;

        try {
            connection = dataSource.getConnection();
            statement = connection.prepareStatement("INSERT INTO applicant "+
                    "(name, surname, dateOfBirth, email, telephone)"+
                    "VALUES (?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, applicant.getFirstname());
            statement.setString(2, applicant.getLastname());
            statement.setString(3, applicant.getDateOfBirth());
            statement.setString(4, applicant.getEmail());
            statement.setString(5, applicant.getPhone());

            int affectedRows = statement.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("Creating user failed, no rows affected.");
            }

            generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                applicant.setId(generatedKeys.getLong(1));
            } else {
                throw new SQLException("Creating user failed, no generated key obtained.");
            }
        } finally {
            if (generatedKeys != null) try { generatedKeys.close(); } catch (SQLException logOrIgnore) {}
            if (statement != null) try { statement.close(); } catch (SQLException logOrIgnore) {}
            if (connection != null) try { connection.close(); } catch (SQLException logOrIgnore) {}
        }
        return applicant.getId();
    }

    /**
     * This function searches for a applicant with the specific Id and
     * returns a Applicant object if found.
     * <p>
     * This method receives the Id of a user and fetches the corresponding
     * user from the database, returning a Applicant object.
     * @param applicantId The applicant Id to be fetched
     * @return A Applicant object.
     * @throws java.lang.Exception
     */
    @Override
    public Applicant getApplicantWithId(int applicantId) throws Exception {

	// The SQL code to be sent
        String sql = "SELECT * FROM applicant WHERE id = ?";
	// The object containing the connection
        Connection conn = null;

        try {
	    // Get a connection (the source is Spring-Datasource.xml)
            conn = dataSource.getConnection();
	    // We have paramaters, we need a prepareStatement
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, applicantId);
	    // Creates a applicant to return
            Applicant applicant = null;
	    // Execute query
            ResultSet rs = ps.executeQuery();
	    // If we get a applicant that matches, write to the Applicant object
            if (rs.next()) {
                applicant = new Applicant();
		applicant.setId(rs.getInt("id"));
                applicant.setFirstname(rs.getString("name"));
                applicant.setLastname(rs.getString("surname"));
                applicant.setDateOfBirth(rs.getString("dateOfBirth"));
                applicant.setEmail(rs.getString("email"));
                applicant.setPhone(rs.getString("telephone"));
            }
	    // Close 
            rs.close();
            ps.close();
	    // return applicant
            return applicant;
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            if (conn != null) {
                try {
                conn.close();
                } catch (SQLException e) {}
            }
        }
    }
    
    
    
    /**
     * This functions return all the Applicant objects in the database.
     * <p>
     * This method receives the Id of a user and fetches the corresponding
     * user from the database, returning a Applicant object.
     * @return an ArrayList<Applicant> of all the applicants in the database.
     * @throws java.lang.Exception
     * @throws java.sql.SQLException
     */
    @Override
    public ArrayList<Applicant> getAllApplicants() throws Exception {
        // The SQL code to be sent
        String sql = "SELECT * FROM applicant";
	// The object containing the connection
        Connection conn = null;

        try {
	    // Get a connection (the source is Spring-Datasource.xml)
            conn = dataSource.getConnection();
	    // We have paramaters, we need a prepareStatement
            PreparedStatement ps = conn.prepareStatement(sql);		    // <-- Change this 
	    // Creates an ArrayList to return, this ArrayList contains all the Applicant rows that exist
            ArrayList<Applicant> resultsArrayList = new ArrayList<Applicant>();
	    // Execute query
            ResultSet rs = ps.executeQuery();
	    // While we have more applicants that match, write them the Applicant object
            while (rs.next()) {
                Applicant applicants = new Applicant();
		applicants.setId(rs.getInt("id"));
                applicants.setFirstname(rs.getString("name"));
                applicants.setLastname(rs.getString("surname"));
                applicants.setDateOfBirth(rs.getString("dateOfBirth"));
                applicants.setEmail(rs.getString("email"));
                applicants.setPhone(rs.getString("telephone"));
		// Add the applicant object to the returned ArrayList
                resultsArrayList.add(applicants);
            }
            rs.close();
            ps.close();
            return resultsArrayList;
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            if (conn != null) {
                try {
                conn.close();
                } catch (SQLException e) {}
            }
        }
    }

    @Override
    public ArrayList<Applicant> getApplicantIDWhere(String insertedSQL) throws Exception  {
	// The SQL code to be sent
        String sql = "SELECT * FROM applicant WHERE " + insertedSQL;
	// The object containing the connection
        Connection conn = null;

        try {
	    // Get a connection (the source is Spring-Datasource.xml)
            conn = dataSource.getConnection();
	    // We have paramaters, we need a prepareStatement
            PreparedStatement ps = conn.prepareStatement(sql);
	    ArrayList<Applicant> resultsArrayList = new ArrayList<Applicant>();
	    // Creates a applicant to return
            Applicant applicant = null;
	    // Execute query
            ResultSet rs = ps.executeQuery();
	    // If we get a applicant that matches, write to the Applicant object
            while (rs.next()) {
                applicant = new Applicant();
		applicant.setId(rs.getInt("id"));
                applicant.setFirstname(rs.getString("name"));
                applicant.setLastname(rs.getString("surname"));
                applicant.setDateOfBirth(rs.getString("dateOfBirth"));
                applicant.setEmail(rs.getString("email"));
                applicant.setPhone(rs.getString("telephone"));
		// Add the applicant object to the returned ArrayList
                resultsArrayList.add(applicant);
            }
	    // Close 
            rs.close();
            ps.close();
	    // return applicant
            return resultsArrayList;
        } catch (SQLException e) {
            throw new Exception(e);
        } finally {
            if (conn != null) {
                try {
                conn.close();
                } catch (SQLException e) {}
            }
        }
    }
}
